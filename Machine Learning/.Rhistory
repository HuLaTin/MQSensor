for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
eventDF <- events
which(is.na(Events_MQ2))
View(events)
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
events <- as.data.frame(t(events))
TimeIndex$Time <- as.POSIXct(TimeIndex$Time, origin="1970-01-01", tz="GMT")
TimeIndex["Timediff"] <- NA
row.names(events) <- paste(TimeIndex$Time, "Event")
for (l in 1:nrow(trialTimes))
{
for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
eventDF <- events
which(is.na(Events_MQ2))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
events <- as.data.frame(t(events))
TimeIndex$Time <- as.POSIXct(TimeIndex$Time, origin="1970-01-01", tz="GMT")
TimeIndex["Timediff"] <- NA
row.names(events) <- paste(TimeIndex$Time, "Event")
for (l in 1:nrow(trialTimes))
{
for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
eventDF <- events
which(is.na(events))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
events <- as.data.frame(t(events))
TimeIndex$Time <- as.POSIXct(TimeIndex$Time, origin="1970-01-01", tz="GMT")
TimeIndex["Timediff"] <- NA
row.names(events) <- paste(TimeIndex$Time, "Event")
for (l in 1:nrow(trialTimes))
{
for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
which(is.na(events))
eventDF <- events
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
events <- as.data.frame(t(events))
TimeIndex$Time <- as.POSIXct(TimeIndex$Time, origin="1970-01-01", tz="GMT")
TimeIndex["Timediff"] <- NA
row.names(events) <- paste(TimeIndex$Time, "Event")
for (l in 1:nrow(trialTimes))
{
for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
which(is.na(events))
eventDF <- events
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
events <- as.data.frame(t(events))
TimeIndex$Time <- as.POSIXct(TimeIndex$Time, origin="1970-01-01", tz="GMT")
TimeIndex["Timediff"] <- NA
row.names(events) <- paste(TimeIndex$Time, "Event")
for (l in 1:nrow(trialTimes))
{
for (m in 1:nrow(TimeIndex))
{
TimeIndex[m, "Timediff"] = difftime(trialTimes[l, "Time"], TimeIndex[m, "Time"], units="mins")
if (abs(TimeIndex[m,"Timediff"]) <= 5){
rownames(events)[m] <- trialTimes$Chemical[l]
break
}
}
}
assign(paste("Index", toString(z), sep = "_"), EventIndex)
assign(paste("Captured", toString(z), sep = "_"), eventsCaptured)
assign(paste("Times", toString(z), sep = "_"), TimeIndex)
write.csv(events, paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Events.csv", sep="-"),)
assign(paste("Events", toString(z), sep = "_"), events)
which(is.na(events))
View(eventTemp)
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
which(is.na(events))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
which(is.na(events))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
which(is.na(events))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
which(is.na(events))
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
View(eventsCaptured)
which(is.na(eventsCaptured))
View(eventsCaptured)
eventsCaptured <- eventsCaptured[,-c("Pressure_pa")]
eventsCaptured <- eventsCaptured[-c("Pressure_pa")]
View(eventsCaptured)
eventsCaptured <- eventsCaptured[-c(13)]
View(eventsCaptured)
eventsCaptured <- eventsCaptured[-c(11,13)]
eventTemp <- data.frame()
events <- data.frame(matrix(NA, nrow = windowSize))
events <- events[-c(1)]
numEvents = nrow(eventsCaptured)/windowSize
for (eventNum in 1:numEvents){
eventStart = (windowSize * (eventNum - 1)) + 1
eventStop = (windowSize * eventNum)
eventTemp <- as.data.frame(eventsCaptured[eventStart:eventStop,])
################################################################################################
#eventTemp[,2:9] <- as.data.frame(scale(eventTemp[,2:9]))
#eventTemp[,2:9] <- as.data.frame(lapply(eventTemp[,2:9], normalize))
eventTemp[,2:ncol(eventTemp)] <- as.data.frame(scale(eventTemp[,2:ncol(eventTemp)]))
#eventTemp[,2:ncol(eventTemp)] <- as.data.frame(lapply(eventTemp[,2:ncol(eventTemp)], normalize))
################################################################################################
eventTemp["num"] <- seq(length=nrow(eventTemp))
eventTemp <- melt(eventTemp, id=c("Time","num"))
events <- cbind(events, eventTemp[,4])
names(events)[c(ncol(events))] <- paste("Event", toString(eventNum), sep=" ")
}
which(is.na(eventsCaptured))
which(is.na(events))
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
#km.res <- kmeans(eventDF, k, nstart = 25)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "FvizCluster.png", sep="-"), width = 800, height = 800)
fviz_cluster(km.res, eventDF, main = paste(z, "Cluster Plot", "| Clusters:", toString(k)))
Sys.sleep(2)
dev.off()
#km.res <- kmeans(eventDF, k, nstart = 25)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "FvizCluster.png", sep="-"), width = 800, height = 800)
fviz_cluster(km.res, eventDF, main = paste(z, "Cluster Plot", "| Clusters:", toString(k)))
Sys.sleep(2)
dev.off()
View(Events_MQ2)
#############################################################
#Choose your file
#print("Choose file of sensor readings. (.csv)")
SensorData <- read.csv(file.choose(), header=TRUE, sep=",")
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
#km.res <- kmeans(eventDF, k, nstart = 25)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "FvizCluster.png", sep="-"), width = 800, height = 800)
Sys.sleep(2)
fviz_cluster(km.res, eventDF, main = paste(z, "Cluster Plot", "| Clusters:", toString(k)))
Sys.sleep(2)
dev.off()
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
#############################################################
#Choose your file
#print("Choose file of sensor readings. (.csv)")
SensorData <- read.csv(file.choose(), header=TRUE, sep=",")
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
fviz_cluster(km.res, eventDF, main = paste(z, "Cluster Plot", "| Clusters:", toString(k)))
print(fviz_cluster(km.res, eventDF, main = paste(z, "Cluster Plot", "| Clusters:", toString(k))))
#############################################################
#Choose your file
#print("Choose file of sensor readings. (.csv)")
SensorData <- read.csv(file.choose(), header=TRUE, sep=",")
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
heatmap(eventDF)
View(eventDF)
eventDF <- as.matrix(eventdf)
eventDF <- as.matrix(eventDF)
heatmap(eventDF)
heatmap(eventDF, main = paste(z, "Heat Map"))
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1000, height = 1000)
print(heatmap(eventDF, main = paste(z, "Heat Map")))
dev.off()
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1200, height = 1200)
print(heatmap(eventDF, main = paste(z, "Heat Map")))
dev.off()
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventDF, main = paste(z, "Heat Map")))
dev.off()
print(heatmap(eventDF[1:windowSize,], main = paste(z, "Heat Map")))
print(heatmap(eventDF[,1:windowSize], main = paste(z, "Heat Map")))
print(heatmap(eventDF[,1:20], main = paste(z, "Heat Map")))
print(heatmap(eventDF[,1:200], main = paste(z, "Heat Map")))
print(heatmap(eventDF, main = paste(z, "Heat Map")))
print(heatmap(eventDF[1:100,], main = paste(z, "Heat Map")))
print(heatmap(eventDF[1:60,], main = paste(z, "Heat Map")))
print(heatmap(eventDF[1:60,1:10], main = paste(z, "Heat Map")))
print(heatmap(eventDF[1:5,1:10], main = paste(z, "Heat Map")))
print(heatmap(eventDF, main = paste(z, "Heat Map")))
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map")))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
library(reshape2)
library(cluster)
library(factoextra)
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map")))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map")))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map")))
eventHeat <- as.matrix(eventDF)
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map")))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "orange", "green"))(n = 299)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
outputPath <- file.path("C:", "Users", "Hunter Tiner", "Documents", "MQSensor", "Machine Learning", "eventsOutput")
#k <- as.integer(5)
print(outputPath)
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "black", "green"))(n = 299)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "orange", "green"))(n = 100)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "orange", "green"))(n = 300)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "green", "black"))(n = 300)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
#d3heatmap or heatmaply
my_palette <- colorRampPalette(c("red", "yellow", "blue"))(n = 300)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "HeatMap.png", sep="-"), width = 1600, height = 1200)
print(heatmap(eventHeat[,], main = paste(z, "Heat Map"),col=my_palette))
#print(heatmap(eventDF[,150:210], main = paste(z, "Heat Map")))
dev.off()
shiny::runApp('~/Rapp/voltageApp')
runApp('~/Rapp/voltageApp')
runApp('~/Rapp/voltageApp')
library(collapsibleTree)
install.packages(collapsibleTree)
install.packages("collapsibleTree")
library(collapsibleTree)
# library(htmlwidgets)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
eventDF <- read.csv(file.choose(), header=TRUE, sep=",")
eventDF <- events
eventHeat <- as.matrix(eventDF)
############################
library(collapsibleTree)
library(htmlwidgets)
k <- round(sqrt(nrow(eventDF)))
#km.res <- kmeans(eventDF, k, nstart = 25)
##########################################nstart???
if (kSwitch == TRUE){
# K-Means Cluster Analysis
km.res <- kmeans(eventDF, k)
aggregate(eventDF,by=list(km.res$cluster),FUN=mean)
eventDF <- data.frame(eventDF, km.res$cluster)
} else {
# K-means with pam()
km.res <- pam(eventDF, k)
aggregate(eventDF,by=list(km.res$cluster),FUN=mean)
eventDF <- data.frame(eventDF, km.res$cluster)
}
# Ward Hierarchical Clustering
distance <- dist(eventDF, method = "euclidean") # distance matrix
fit <- hclust(distance, method="ward.D2")
groups <- cutree(fit, k)
png(paste(toString(Sys.Date()), toString(z), toString(ExpectedChange), toString(windowSize), "Dendrogram.png", sep="-"), width = 1200, height = 600)
plot(fit, main = paste(toString(z), toString(ExpectedChange), toString(windowSize), "Dendrogram","| Clusters:", toString(k), sep=" "))
#groups <- cutree(fit, k)
rect.hclust(fit, k, border="red")
dev.off()
dendrogramTest <- collapsibleTree(fit)
dendrogramTest <- collapsibleTree(eventDF)
dendrogramTest <- collapsibleTree(eventDF, c("wool", "tension", "breaks"))
View(eventDF)
dendrogramTest <- collapsibleTree(eventDF, c("Acetone-1"))
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
source('~/MQSensor/Machine Learning/MLTest.R', echo=TRUE)
