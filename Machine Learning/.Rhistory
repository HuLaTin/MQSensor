rect.hclust(fit, k=clustnum, border="red")
set.seed(Sys.time())
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
library(factoextra)
set.seed(Sys.time())
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
library(svDialogs)
library(factoextra)
set.seed(Sys.time())
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
View(Times_MQ6_ADC)
View(Times_MQ2_ADC)
View(Events_MQ7_ADC)
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
library(svDialogs)
library(factoextra)
set.seed(Sys.time())
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
library(svDialogs)
library(factoextra)
set.seed(Sys.time())
sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
sensorName <- sensorUser
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
View(Index_MQ2_ADC)
View(Index_MQ4_ADC)
View(Index_MQ7_ADC)
View(Index_MQ4_ADC)
View(Index_MQ8_ADC)
View(Index_MQ9_ADC)
View(Index_MQ135_ADC)
View(Index_MQ6_ADC)
View(Index_MQ6_ADC)
View(Times_MQ2_ADC)
View(Events_MQ2_ADC)
View(Events_MQ2_ADC)
View(Events_MQ2_ADC)
View(Events_MQ4_ADC)
View(Index_MQ6_ADC)
#Choose your file
SensorData <- read.csv(file.choose(), header=TRUE, sep=",")
#save CSV of Events,
write.csv(eventsCaptured, paste(toString(i), toString(ExpectedChange),"events.csv") col.names = FALSE, row.names = FALSE)
#save CSV of Events,
write.csv(eventsCaptured, paste(toString(i), toString(ExpectedChange),"events.csv")) col.names = FALSE, row.names = FALSE)
#sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- sensorUser
sensorUser < i
#sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- sensorUser
sensorUser <- i
#for loop
sensor <- c("MQ2","MQ4", "MQ5","MQ6", "MQ7", "MQ8", "MQ9", "MQ135")
for (i in sensor)
{
#sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- sensorUser
sensorUser <- i
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
#get(sensorUser)
# Determine number of clusters
# wss <- (nrow(get(sensorUser))-1)*sum(apply(get(sensorUser),2,var))
# for (i in 2:nrow(get(sensorUser)))
# wss[i] <- sum(kmeans(get(sensorUser), centers=i)$withinss)
# plot(1:nrow(get(sensorUser)), wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
#clustnum <- 25
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
# groups <- cutree(fit, k=5) # cut tree into 7 clusters
# draw dendogram with red borders around the 7 clusters
# rect.hclust(fit, k=5, border="red")
#Heatmap
# library(gplots)
# library(RColorBrewer)
# my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000)
# heatmap.2(events.feature,col=my_palette, dendrogram = "row", trace = "none", key = 5,
#           cexCol = .8, margin = c(4,4), cexRow = .5, symbreaks = FALSE)
}
library(svDialogs)
library(factoextra)
set.seed(Sys.time())
#for loop
sensor <- c("MQ2","MQ4", "MQ5","MQ6", "MQ7", "MQ8", "MQ9", "MQ135")
for (i in sensor)
{
#sensorUser <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- sensorUser
sensorUser <- i
sensorUser <- paste("Events", toString(sensorUser), "ADC", sep = "_")
#get(sensorUser)
# Determine number of clusters
# wss <- (nrow(get(sensorUser))-1)*sum(apply(get(sensorUser),2,var))
# for (i in 2:nrow(get(sensorUser)))
# wss[i] <- sum(kmeans(get(sensorUser), centers=i)$withinss)
# plot(1:nrow(get(sensorUser)), wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
clustnum <- sqrt(nrow(get(sensorUser)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
#clustnum <- 25
# K-Means Cluster Analysis
kclustering <- kmeans(get(sensorUser), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(sensorUser), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(sensorUser),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(sensorUser), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
# groups <- cutree(fit, k=5) # cut tree into 7 clusters
# draw dendogram with red borders around the 7 clusters
# rect.hclust(fit, k=5, border="red")
#Heatmap
# library(gplots)
# library(RColorBrewer)
# my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000)
# heatmap.2(events.feature,col=my_palette, dendrogram = "row", trace = "none", key = 5,
#           cexCol = .8, margin = c(4,4), cexRow = .5, symbreaks = FALSE)
}
source('~/MQSensor/Machine Learning/Clustering.R', echo=TRUE)
source('~/MQSensor/Machine Learning/Clustering.R', echo=TRUE)
#for loop
sensor <- c("MQ2","MQ4", "MQ5","MQ6", "MQ7", "MQ8", "MQ9", "MQ135")
for (i in sensor)
{
#SensorName <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- SensorName
SensorName <- i
SensorName <- paste("Events", toString(SensorName), "ADC", sep = "_")
#get(SensorName)
# Determine number of clusters
# wss <- (nrow(get(SensorName))-1)*sum(apply(get(SensorName),2,var))
# for (i in 2:nrow(get(SensorName)))
# wss[i] <- sum(kmeans(get(SensorName), centers=i)$withinss)
# plot(1:nrow(get(SensorName)), wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
clustnum <- sqrt(nrow(get(SensorName)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
#clustnum <- 25
# K-Means Cluster Analysis
kclustering <- kmeans(get(SensorName), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(SensorName), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(SensorName),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(SensorName), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
# groups <- cutree(fit, k=5) # cut tree into 7 clusters
# draw dendogram with red borders around the 7 clusters
# rect.hclust(fit, k=5, border="red")
#Heatmap
# library(gplots)
# library(RColorBrewer)
# my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000)
# heatmap.2(events.feature,col=my_palette, dendrogram = "row", trace = "none", key = 5,
#           cexCol = .8, margin = c(4,4), cexRow = .5, symbreaks = FALSE)
}
library(factoextra)
set.seed(Sys.time())
#for loop
sensor <- c("MQ2","MQ4", "MQ5","MQ6", "MQ7", "MQ8", "MQ9", "MQ135")
for (i in sensor)
{
#SensorName <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- SensorName
SensorName <- i
SensorName <- paste("Events", toString(SensorName), "ADC", sep = "_")
#get(SensorName)
# Determine number of clusters
# wss <- (nrow(get(SensorName))-1)*sum(apply(get(SensorName),2,var))
# for (i in 2:nrow(get(SensorName)))
# wss[i] <- sum(kmeans(get(SensorName), centers=i)$withinss)
# plot(1:nrow(get(SensorName)), wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
clustnum <- sqrt(nrow(get(SensorName)))
clustnum <- round(clustnum)
#print number of clusters
clustnum
#clustnum <- 25
# K-Means Cluster Analysis
kclustering <- kmeans(get(SensorName), clustnum)
str(kclustering)
# library(factoextra)
fviz_cluster(kclustering, data = get(SensorName), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(SensorName),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(SensorName), kclustering$cluster)
#data points in each group
kclustering$size
events$cluster <- kclustering$cluster
table(events$cluster)
events.feature = as.matrix(events)
#Dendrogram
hc <- hclust(dist(events.feature), "ave")
plot(hc, hang = -1, main = paste(sensorName, "Cluster Dendrogram"))
# Ward Hierarchical Clustering
d <- dist(events, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward.D")
plot(fit, main = paste(sensorName, "Ward Hierarchical Clustering")) # display dendogram
groups <- cutree(fit, k=clustnum) # cut tree into 7 clusters
rect.hclust(fit, k=clustnum, border="red")
# groups <- cutree(fit, k=5) # cut tree into 7 clusters
# draw dendogram with red borders around the 7 clusters
# rect.hclust(fit, k=5, border="red")
#Heatmap
# library(gplots)
# library(RColorBrewer)
# my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000)
# heatmap.2(events.feature,col=my_palette, dendrogram = "row", trace = "none", key = 5,
#           cexCol = .8, margin = c(4,4), cexRow = .5, symbreaks = FALSE)
}
# library(factoextra)
fviz_cluster(kclustering, data = get(SensorName), main = paste(sensorName, "Cluster Plot"))
# get cluster means
aggregate(get(SensorName),by=list(kclustering$cluster),FUN=mean)
# append cluster assignment
events <- data.frame(get(SensorName), kclustering$cluster)
#data points in each group
kclustering$size
#data points in each group
kclustering$size
str(kclustering)
# K-Means Cluster Analysis
kclustering <- kmeans(get(SensorName), clustnum)
#str(kclustering)
fviz_cluster(kclustering, data = get(SensorName), main = paste(sensorName, "Cluster Plot"))
print(i)
source('~/MQSensor/Machine Learning/Clustering.R', echo=TRUE)
source('~/MQSensor/Machine Learning/Clustering.R', echo=TRUE)
#sensorName <- toString(dlgInput("Which sensor?", default = "MQ2", Sys.info()["user"])$res)
#sensorName <- sensorName
sensorName <- i
eventName <- paste("Events", toString(sensorName), "ADC", sep = "_")
#str(kclustering)
fviz_cluster(kclustering, data = get(eventName), main = paste(sensorName, "Cluster Plot"))
print(i)
source('~/MQSensor/Machine Learning/Clustering.R', echo=TRUE)
change <- c(".2", ".1", ".05", ".03")
change <- c(".2", ".1", ".05", ".03")
for (j in change)
change <- c(".2", ".1", ".05", ".03")
for (j in change)
{
ExpectedChange <- as.double(j)
print(ExpectedChange)
}
View(Times_MQ2_ADC)
View(Index_MQ2_ADC)
View(Events_MQ2_ADC)
View(Times_MQ2_ADC)
write.csv(eventsCaptured, paste(toString(i), toString(ExpectedChange), ".csv", sep="_"),
row.names=FALSE,
col.names=FALSE)
Sys.time()
Sys.Date()
write.csv(eventsCaptured, paste(toString(Sys.date()), toString(i), toString(ExpectedChange), "Events.csv", sep="_"),
row.names=FALSE,
col.names=FALSE)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="_"),
row.names=FALSE,
col.names=FALSE)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
row.names=FALSE,
col.names=FALSE)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
col.names=FALSE,
row.names=FALSE)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
path = ".\\"
)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-")
,path = ".\\"
)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
path = ".\\"
)
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
#            path = ".\\"
)
#dir.create() or dir.exists?
write.csv(eventsCaptured, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
#path = "path\\"
)
View(Captured_MQ7_ADC)
#dir.create() or dir.exists?
write.csv(events, paste(toString(Sys.Date()), toString(i), toString(ExpectedChange), "Events.csv", sep="-"),
#path = "path\\"
)
View(events)
